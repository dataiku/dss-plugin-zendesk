import groovy.json.JsonSlurper

def triggerRunId
def triggerId
def testcases = []
def scenario_timeout = 180
def project = "PLUGINTESTZENDESK"

List startScenario(proj, scenario) {
    def response = httpRequest authentication: 'dss-target-admin', httpMode: 'POST', url: "${dss_target_host}/public/api/projects/" + proj + "/scenarios/${scenario}/run/"
    def json = new JsonSlurper().parseText(response.content)
    triggerId = json.trigger.id
    triggerRunId = json.runId
    return [triggerId, triggerRunId]
}

boolean checkForCompletion(proj, scenario, triggerId, triggerRunId, tc) {
    def r = httpRequest authentication: 'dss-target-admin', httpMode: 'GET', url: "${dss_target_host}/public/api/projects/" + proj + "/scenarios/${scenario}/get-run-for-trigger?triggerId=${triggerId}&triggerRunId=${triggerRunId}"
    def j = new JsonSlurper().parseText(r.content)
    println("Content: "+ r.content)
    def over = j.scenarioRun.containsKey("result");
    if(over) {
        start = j.scenarioRun.result.start
        end = j.scenarioRun.result.end
        outcome = j.scenarioRun.result.outcome
        message = ""
        if (outcome != "SUCCESS") {
            message = "Error, please check at ${dss_target_host}/projects/${proj}/scenarios/${scenario}/runs/list/${triggerRunId}"
        }
        tc.add(["${proj}", "${scenario}", outcome, (end-start)/1000, message]);
    }
    return over;
}

String generateJunitReport(testcases) {
    def junit = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
    junit += "<testsuite tests=\""+ testcases.size() +"\" time=\""+ testcases.sum{ it[3] } +"\">\n"
    testcases.each {
        println("REsult: " + it)
        junit += "<testcase classname=\"" + it[0] + "\" name=\"" + it[1] + "\" time=\"" + it[3] + "\">\n"
        if(it[2] != "SUCCESS") {
            junit += "<error message=\"" + it[4] +"\"/>\n"
        }
        junit += "</testcase>\n"
    }
    junit += "</testsuite>"
    println("*****XML*****")
    println(junit)
    return junit
}

pipeline {
    agent any
    stages {
        stage('Make zip') {
            steps {
                sh 'make plugin'
                sh 'cd dist && unzip dss-plugin-zendesk-1.0.0.zip && ls -alh'
            }
        }
        stage('Upload plugin to target host') {
            steps {
                httpRequest authentication: 'dss-target-admin', httpMode: 'POST', url: "${dss_target_host}/public/api/plugins/zendesk/actions/updateFromZip", uploadFile: 'dist/dss-plugin-zendesk-1.0.0.zip', multipartName: 'file'
            }
        }
        stage('Update code env') {
            when {
                expression { return fileExists("dist/code-env/python/spec/requirements.txt") }
            }
            steps {
                httpRequest authentication: 'dss-target-admin', httpMode: 'POST', url: "${dss_target_host}/public/api/plugins/zendesk/code-env/actions/update"
            }
        }
        stage('Running tests scenarii') {
            steps {
                script {
                    (triggerId, triggerRunId) = startScenario(project, "run_read_zendesk_groups")
                }
                sleep(1)
                timeout(scenario_timeout) {
                    waitUntil {
                        script {
                            return checkForCompletion(project, "run_read_zendesk_groups", triggerId, triggerRunId, testcases)
                        }
                    }
                }
                script {
                    (triggerId, triggerRunId) = startScenario(project, "run_read_zendesk_incremental")
                }
                sleep(1)
                timeout(scenario_timeout) {
                    waitUntil {
                        script {
                            return checkForCompletion(project, "run_read_zendesk_incremental", triggerId, triggerRunId, testcases)
                        }
                    }
                }
                script {
                    (triggerId, triggerRunId) = startScenario(project, "run_read_zendesk_organizations")
                }
                sleep(1)
                timeout(scenario_timeout) {
                    waitUntil {
                        script {
                            return checkForCompletion(project, "run_read_zendesk_organizations", triggerId, triggerRunId, testcases)
                        }
                    }
                }
                script {
                    (triggerId, triggerRunId) = startScenario(project, "run_read_zendesk_search")
                }
                sleep(1)
                timeout(scenario_timeout) {
                    waitUntil {
                        script {
                            return checkForCompletion(project, "run_read_zendesk_search", triggerId, triggerRunId, testcases)
                        }
                    }
                }
                script {
                    (triggerId, triggerRunId) = startScenario(project, "run_read_zendesk_tickets")
                }
                sleep(1)
                timeout(scenario_timeout) {
                    waitUntil {
                        script {
                            return checkForCompletion(project, "run_read_zendesk_tickets", triggerId, triggerRunId, testcases)
                        }
                    }
                }
                script {
                    (triggerId, triggerRunId) = startScenario(project, "run_read_zendesk_users")
                }
                sleep(1)
                timeout(scenario_timeout) {
                    waitUntil {
                        script {
                            return checkForCompletion(project, "run_read_zendesk_users", triggerId, triggerRunId, testcases)
                        }
                    }
                }

            }
        }
        stage ('Output test result') {
            steps {
                script {
                    //println("Result: " + outcome + " from " + start + " to " + end)
                    def junit = generateJunitReport(testcases)
                    writeFile file: "junit.xml", text: junit
                }
            }
        }
    }
    post {
        always {
            junit '*.xml'
        }
    }
}
